**Name**,**Symbol**,**Syntax**,**Description**,**Notation**,**Input parameters type**,**Result type**,**Behaviour**,
Parentheses,( ),( op ),Override the default evaluation order of the operators,Func.,op :: dataset | component | scalar,dataset | component | scalar,Specific,
Persistent assignment,<-,re <- op,Assigns an Expression to a persistent model artefact,Infix,"re :: name

op :: dataset",empty,Specific,
Non persistent assignment,:=,re := op,Assigns an Expression to a non persistent model artefact,Infix,"re :: name

op :: dataset | scalar",empty,Specific,
Membership,#,ds#comp,Identifies a Component within a Data Set,Infix,"ds :: dataset

comp :: name<component>",dataset,Specific,
User defined operator call,,"operator_name ( { argument {, argument }\* } )",Invokes a user defined operator passing the arguments,Func.,"operatorName :: name

argument :: user-defined operator parameters data type",user-defined result data type,Specific,
Evaluation of an external routine,eval,"eval ( externalRoutineName ( {argument} {, argument }\* ), language, returns outputType )",Evaluates an external routine,Func.,"externalRoutineName :: string

argument :: any expression

language :: string

outputType :: outputParameterType",dataset,Specific,
Type conversion,cast,"cast ( op, scalarType {, mask } )",converts to the specified data type,Func.,"op :: dataset{ measure<scalar> _}
| component<scalar>
| scalar

scalarType :: scalar

type mask :: string","dataset{ measure<scalar> _}
| component<scalar>
| scalar",Changing data type,
Join,"inner_join, left_join, full_join, cross_join","joinOperator ( ds { as alias } { , ds { as alias }}*
{ using usingComp }
{ filter filterCondition }
{ apply applyExpr | calc calcClause | aggr aggrClause { groupingClause } }
{ keep comp {, comp }* | drop comp {, comp }*  }
{ rename compFrom to compTo { , compFrom to compTo }* } )

joinOperator::= { inner_join | left_join| full_join | cross_join } :sup:`1`

calcClause ::=  { calcRole } calcComp := calcExpr
{ , { calcRole }  calcComp := calcExpr }*

calcRole :: { identifier | measure | attribute | viral attribute} :sup:`1`

aggrClause ::=  { aggrRole } aggrComp := aggrExpr
{ , { aggrRole } aggrComp := aggrExpr }*

aggrRole ::=  { measure | attribute | viral attribute } :sup:`1`

groupingClause  ::=  { group by idList | group except idList | group all conversionExpr } :sup:`1`
{ having havingCondition }","Inner join, left outer join, full outer join, cross join",Func.,"ds :: dataset

alias :: name

usingId :: name < component >

filterCondition :: component<boolean>

applyExpr :: dataset

calcComp:: name<component>

calcExpr :: component<scalar>

aggrComp :: name<component >

aggrExpr :: component<scalar>

groupingId :: name < identifier >

conversionExpr :: component<scalar>

havingCondition :: component<boolean>

comp :: name < component >

compFrom :: component<scalar>

compTo :: component<scalar>",dataset,Specific,
String concatenation,||,op1 || op2,Concatenates two strings,Infix,"op1, op2 :: dataset { measure<string> _\+}
| component<string>
| string","dataset { measure<string> _\+ }
| component<string>
| string","On two scalars, DSs or DSCs",
Whitespace removal,"trim, rtrim, ltrim",{trim|ltrim|rtrim} :sup:`1` ( op ),Removes trailing or/and leading whitespace from a string,Func.,"op :: dataset { measure<string> _\+ }
| component<string>
| string","dataset { measure<string> _\+ }
| component<string>
| string","On one scalar, DS or DSC",
Character case conversion,"upper, lower",{upper | lower} :sup:`1` ( op ),Converts the character case of a string in upper or lower case,Func.,"op :: dataset { measure<string> _\+ }
| component<string>
| string","dataset { measure<string> _\+ }
| component<string>
| string","On one scalar, DS or DSC",
Sub-string extraction,substr,"substr ( op, start, length )",Extracts the substring that starts in a specified position and has a specified length,Func.,"op :: dataset { measure<string> _\+ }
| component<string>
| string

start :: component < integer[>=1]>
| integer[>= 1]

length :: component < integer[>= 0] >
| integer[>=0]","dataset { measure<string> _\+ }
| component<string>
| string","On one DS or
on more than two scalars or DSC",
String pattern replacement,replace,"replace (op, pattern1, pattern2 )",Replaces a specified string-pattern with another one,Func.,"op :: dataset { measure<string> _\+ }
| component<string>
| string

pattern1, pattern2 :: component<string>
| string","dataset { measure<string> _\+ }
| component<string>
| string","On one DS or
on more than two scalars or DSC",
String pattern location,instr,"instr( op, pattern, start, occurrence )",Returns the location of a specified string-pattern,Func.,"op :: dataset { measure<string> _\+ }
| component<string>
| string

pattern :: component<string>
| string

start:: component< integer[ >= 1]>
| integer[>= 1]

occurrence :: component < integer[>= 1] >
| integer[>= 1]","dataset
{measure<integer[>=0]> int_var }
| component <integer[>= 0]>
| integer[>= 0]",Changing data type,
String length,length,length ( op ),Returns the length of a string,Func.,"op :: dataset { measure<string> _ }
| component<string>
| string","dataset
{measure<integer[>=0]> int_var }
| component <integer[>= 0]>
| integer[>= 0]",Changing data type,
Unary plus,\+,\+ op,Replicates the operand with the sign unaltered,Infix,"op ::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On one scalar, DS or DSC",
Unary minus,\-,\- op,Replicates the operand with the sign changed,Infix,"op ::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On one scalar, DS or DSC",
Addition,\+,op1 \+ op2,Sums two numbers,Infix,"op1, op2::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On two scalars, DSs or DSCs",
Subtraction,\-,op1 - op2,Subtracts two numbers,Infix,"op1, op2::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On two scalars, DSs or DSCs",
Multiplication,\*,op1 \* op2,Multiplies two numbers,Infix,"op1, op2::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On two scalars, DSs or DSCs",
Division,/,op1 / op2,Divides two numbers,Infix,"op1, op2::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On two scalars, DSs or DSCs",
Modulo,mod,"mod ( op1, op2)",Calculates the remainder of a number divided by a certain divisor,Func.,"op1, op2::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number> _\+ }
| component<number>
| number","On two scalars, DSs or DSCs",
Rounding,round,"round ( op, numDigit )",Rounds a number to a certain digit,Func.,"op ::
dataset { measure<number> _\+ }
| component<number>
| number

numDigit::
component < integer > | integer","dataset
{ measure<number> _\+ }
| component<number>
| number","On one DS or
on two scalars or DSC",
Truncation,trunc,"trunc ( op, numDigit )",Truncates a number to a certain digit,Func.,"op ::
dataset { measure<number> _\+ }
| component<number>
| number

numDigit ::
component < integer > | integer","dataset
{ measure<number> _\+ }
| component<number>
| number","On one DS or
on two scalars or DSC",
Ceiling,ceil,ceil ( op ),Returns the smallest integer which is greater or equal than a number,Func.,"op ::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<integer> _\+ }
| component< integer >
| integer","On one scalar, DS or DSC",
Floor,floor,floor ( op ),Returns the greater integer which is smaller or equal than a number,Func.,"op ::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<integer> _\+ }
| component< integer >
| integer","On one scalar, DS or DSC",
Absolute value,abs,abs ( op ),Calculates the absolute value of a number,Func.,"op ::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number[>=0]> _\+ }
| component<number[>=0]>
| number[>= 0]","On one scalar, DS or DSC",
Exponential,exp,exp ( op ),Raises e (base of the natural logarithm) to a number,Func.,"op::
dataset { measure<number> _\+ }
| component<number>
| number","dataset
{ measure<number[>0]> _\+ }
| component<number[>0]>
| number[> 0]","On one scalar, DS or DSC",
Natural logarithm,ln,ln ( op ),Calculates the natural logarithm of a number,Func.,"op ::
dataset
{measure<number[>0]> _\+ }
| component<number[>0]>
| number[>0]","dataset
{ measure<number> _\+ }
| component<number>
| number","On one scalar, DS or DSC",
Power,power,"power ( base, exponent)",Raises a number to a certain exponent,Func.,"base ::
dataset { measure<number> _\+ }
| component<number>
| number

exponent :: component<number> | number","dataset
{ measure<number> _\+ }
| component<number>
| number","On one DS or
on two scalars or DSC",
Logarithm,log,"log ( op, num )",Calculates the logarithm of a number to a certain base,Func.,"op :: dataset
{ measure<number[>1]> _\+ }
| component<number[>1]>
| number[>1]

num:: component<integer[>0]>
| integer[>0]","dataset
{ measure<number> _\+ }
| component<number>
| number","On one DS or
on two scalars or DSC",
Square root,sqrt,sqrt ( op ),Calculates the square root of a number,Func.,"op :: dataset
{ measure<number[>=0> _\+ }
| component<number[>= 0]>
| number[>= 0]","dataset
{ measure<number[>=0]> _\+ }
| component<number[>= 0]>
| number[>= 0]","On one scalar, DS or DSC",
Equal to,=,left = right,Verifies if two values are equal,Infix,"left,right ::
dataset {measure<scalar> _}
| component<scalar>
| scalar","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Not equal to,<>,left <> right,Verifies if two values are not equal,Infix,"left, right ::
dataset {measure<scalar> _}
| component<scalar>
| scalar","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Greater than,">
>=",left { > | >= } :sup:`1` right,Verifies if a first value is greater ( or equal ) than a second value,Infix,"left, right ::
dataset {measure<scalar> _ }
| component<scalar>
| scalar","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Less than,"<
<=",left { < | <= } :sup:`1` right,Verifies if a first value is less (or equal) than a second value,Infix,"left, right ::
dataset {measure<scalar> _}
| component<scalar>
| scalar","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Between,between,"between( op, from, to )",Verify if a value belongs to a range of values,Func.,"op ::
dataset {measure<scalar> _}
| component<scalar>
| scalar

from :: scalar | component<scalar>

to :: scalar | component<scalar>","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Element of,in,"op in collection

collection ::= set | valueDomainName",Verifies if a value belongs to a set of values,Infix,"op ::
dataset {measure<scalar> _}
| component<scalar>
| scalar

collection :: set<scalar>
| name<value_domain>","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Element of,not_in,"op not_in collection

collection ::= set | valueDomainName",Verifies if a value does not belong to a set of values,Infix,"op ::
dataset {measure<scalar> _}
| component<scalar>
| scalar

collection :: set<scalar>
| name<value_domain>","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Match_characters,match_characters,"match_characters (op, pattern)",Verifies if a value respects or not a pattern,Func.,"op::
dataset {measure<string> _}
| component<string>
| string

pattern ::
string | component<string>","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Isnull,isnull,isnull ( op ),Verifies if a value is NULL,Func.,"op ::
dataset {measure<scalar> _}
| component<scalar>
| scalar","dataset
{measure<boolean> bool_var}
| component<boolean>
| boolean",Changing data type,
Exists in,exists_in,"exists_in ( op1, op2, retain)

retain ::= { true | false | all }","As for the common identifiers of op1 and op2, verifies if the combinations of values of op1 exist in op2.",Func.,"op1, op2 :: dataset","dataset
{measure<boolean> bool_var}",Changing data type,
Logical conjunction,and,op1 and op2,Calculates the logical AND,,"op1,op2 ::
dataset {measure<boolean> _}
| component<boolean>
| boolean","dataset
{ measure<boolean> _}
| component<boolean>
| boolean",Boolean,
Logical disjunction,or,op1 or op2,Calculates the logical OR,,"op1,op2 ::
dataset {measure<boolean> _}
| component<boolean>
| boolean","dataset
{ measure<boolean> _}
| component<boolean>
| boolean",Boolean,
Exclusive disjunction,xor,op1 xor op2,Calculates the logical XOR,,"op1,op2 ::
dataset {measure<boolean> _}
| component<boolean>
| boolean","dataset
{ measure<boolean> _}
| component<boolean>
| boolean",Boolean,
Logical negation,not,not op,Calculates the logical NOT,,"op ::
dataset {measure<boolean> _ }
| component<boolean>
| boolean","dataset
{ measure<boolean> _ }
| component<boolean>
| boolean",Boolean,
Period indicator,period_indicator,period_indicator ( {op} ),Extracts the period indicator from a time_period value,Func.,"op ::
dataset
{ identifier <time_period> _,
identifier _\* }
| component<time_period>
| time_period","dataset { measure<duration> duration_var }
| component <duration>
| duration",Specific,
Fill time series,fill_time_series,"fill_time_series ( op {, limitsMethod } )

limitsMethod ::= single | all",Replaces each missing data point in the input Data Set,Func.,"op ::
dataset
{ identifier <time> _, identifier _\* }","dataset
{ identifier <time> _, identifier _\* }",Specific,
Flow to stock,flow_to_stock,flow_to_stock ( op ),Transforms from a flow interpretation of a Data Set to stock,Func.,"op ::
dataset { identifier <time> _, identifier _\*, measure<number> _\+ }","dataset
{ identifier < time > _, identifier _\*, measure<number> _\+ }",Specific,
Stock to flow,stock_to_flow,stock_to_flow ( op ),Transforms from stock to flow interpretation of a Data Set,Func.,"op ::
dataset
{ identifier <time> _, identifier _\*, measure<number> _\+ }","dataset
{ identifier < time > _, identifier _\*, measure<number> _\+ }",Specific,
Time shift,timeshift,"timeshift ( op, shiftNumber )",Shifts the time component of a specified range of time,Func.,"op ::
dataset
{ identifier <time> _, identifier _\* }

shiftNumber :: integer","dataset
{ identifier < time > _, identifier _\* }",Specific,
Time aggregation,time_agg,"time_agg ( periodIndTo {, periodIndFrom } {,op }{, first | last })",Converts the time values from higher to lower frequency values,Func.,"op ::
dataset
{ identifier <time> _, identifier _\* }
| component<time>
| time

periodIndFrom :: duration

periodIndTo :: duration","dataset
{ identifier < time > _, identifier _\* }
| component<time>
| time",Specific,
Actual time,current_date,current_date ( ),Returns the current date,Func.,,date,Specific,
Union,union,"union ( dsList )

dsList ::= ds {, ds }\*",Computes the union of N datasets,Func.,ds :: dataset,dataset,Set,
Intersection,intersect,"intersect ( dsList )

dsList ::= ds {, ds }\*",Computes the intersection of N datasets,Func.,ds :: dataset,dataset,Set,
Set difference,setdiff,"setdiff ( ds1, ds2 )",Computes the differences of two datasets,Func.,"ds1, ds2 :: dataset",dataset,Set,
Symmetric difference,symdiff,"symdiff ( ds1, ds2 )",Computes the symmetric difference of two datasets,Func.,"ds1, ds2 :: dataset",dataset,Set,
Hierarchical roll-up,hierarchy,"hierarchy ( op, hr { condition condComp {, condComp }\* }
{ rule ruleComp } { mode } { input } { output } )

condComp ::= component {, component }\*

mode ::= non_null | non_zero | partial_null | partial_zero |
always_null | always_zero

input ::= dataset | rule | rule_priority

output ::= computed | all",Aggregates data using a hierarchical ruleset,Func.,"op ::dataset{measure<number> _}

hr :: name < hierarchical >

condComp :: name < component >

ruleComp :: name < identifier >",dataset{measure<number> _},Specific,
Aggregate invocation,,"in a Data Set expression:

aggregateOperator
( firstOperand {, additionalOperand }\* { groupingClause } )

in a Component expression within an aggr clause:

aggregateOperator
( firstOperand {, additionalOperand }\* ) { groupingClause }
aggregateOperator ::= avg | count | max | median | min |
stddev_pop| stddev_samp | sum |
var_pop | var_samp

groupingClause ::=
{ group by groupingId {, groupingId}\*
| group except groupingId {, groupingId}\*
| group all conversionExpr } :sup:`1`
{ having havingCondition }",Set of statistical functions used to aggregate data,Func.,"firstOperand :: dataset | component

additionalOperand :: type of the (possible) additional parameter of the aggregate Operator

groupingId ::name < identifier >

conversionExpr :: identifier

havingCondition :: component<boolean>",dataset | component,Specific,
Analytic invocation,,"analyticOperator
( firstOperand {, additionalOperand }\* over ( analyticClause ) )

analyticOperator ::= avg | count | max | median | min |
stddev_pop| stddev_samp | sum | var_pop
| var_samp | first_value | lag | last_value |
lead | rank | ratio_to_report

analyticClause ::=
{ partitionClause } { orderClause } { windowClause }

partitionClause ::= partition by identifier {, identifier }\*

orderClause ::= order by component { asc | desc }
{, component { asc | desc } }\*

windowClause ::=
{ data points | range } :sup:`1` between limitClause and limitClause

limitClause ::=
{ num preceding | num following | current data point
| unbounded preceding | unbounded following } :sup:`1`",Set of statistical functions used to aggregate data,Func.,"firstOperand ::
dataset | component

additionalOperand :: type of the (possible) additional parameter of the invoked operator

identifier :: name<identifier>

component :: name<component>

num :: integer",dataset | component,Specific,
Check datapoint,check_datapoint,"check_datapoint
( op, dpr { components listComp } { output output } )

listComp ::= comp {, comp }\*

output ::= invalid | all | all_measures",Applies one datapoint ruleset on a Data Set,Func.,"op :: dataset

dpr :: name < datapoint >

comp :: name < component >",dataset,Specific,
Check hierarchy,check_hierarchy,"check_hierarchy (
op, hr { condition condComp {, condComp }\* }
{ rule ruleComp }
{ mode } { input } { output } )

mode ::= non_null | non_zero | partial_null | partial_zero | always_null | always_zero

input ::= dataset | dataset_priority

output ::= invalid | all | all_measures",Applies a hierarchical ruleset to a Data Set,Func.,"op :: dataset

hr :: name < hierarchical >

condComp :: name< component >

ruleComp :: name< identifier >",dataset,Specific,
Check,check,"check ( op { errorcode errorcode } { errorlevel errorlevel }
{ imbalance imbalance } { output } )

output ::= invalid | all",Checks if an expression verifies a condition,Func.,"op :: dataset

errorcode :: errorcode_vd

errorlevel :: errorlevel_vd

imbalance :: number",dataset,Specific,
If then else,if… then… else…,if condition then thenOperand else elseOperand,Makes alternative calculations according to a condition,Func.,"condition ::
dataset { measure <boolean> _}
| component<boolean>
| boolean

thenOperand ::
dataset | component | scalar

elseOperand ::
dataset | component | scalar","dataset
| component
| scalar",Specific,
Nvl,nvl,"nvl ( op1, op2 )",Replaces the null value with a value.,Func.,"op1, op2:: dataset
| component
| scalar","dataset
| component
| scalar",Specific,
Filtering Data Points,filter,op [ filter condition ],Filter data using a Boolean condition,Clause,"op :: dataset

filterCondition :: component<boolean>",dataset,Specific,
Calculation of a Component,calc,"op [ calc { calcRole } calcComp := calcExpr {, { calcRole } calcComp := calcExpr }\* ]",Calculates the values of a Structure Component,Clause,"op :: dataset

calcComp :: name < component >

calcExpr :: component<scalar>",dataset,Specific,
Aggregation,aggr,"op [ aggr aggrClause { groupingClause } ]

aggrClause ::= { aggrRole } aggrComp := aggrExpr
{, { aggrRole } aggrComp:= aggrExpr }\*

groupingClause ::= { group by groupingId {, groupingId }\*
| group except groupingId {, groupingId }\*
| group all conversionExpr } :sup:`1`
{ having havingCondition }

aggrRole::= measure | attribute | viral attribute",Aggregates using an aggregate operator,Clause,"op :: dataset

aggrComp :: name < component >

aggrExpr :: component<scalar>

groupingId :: name <identifier >

conversionExpr :: identifier<scalar>

havingCondition :: component<boolean>",dataset,Specific,
Maintaining Components,keep,"op [ keep comp {, comp }\* ]",Keep list of components,Clause,"op :: dataset

comp :: name < component >",dataset,Specific,
Removal of Components,drop,"op [drop comp {, comp }\* ]",Drop list of components,Clause,"op :: dataset

comp :: name < component >",dataset,Specific,
Change of Component name,rename,"op [ rename comp_from to comp_to {,comp_from to comp_to }\* ]",Rename components,Clause,"op :: dataset

comp_from :: name<component>

comp_to :: name<component>",dataset,Specific,
Pivoting,pivot,"op [ pivot identifier, measure ]",Transform identifier values to measures,Clause,"op :: dataset

identifier :: name <identifier>

measure :: name <measure>",dataset,Specific,
Unpivoting,unpivot,"op [ unpivot identifier, measure ]",Transform measures to identifier values,Clause,"op :: dataset

identifier :: name<identifier>

measure :: name<measure>",dataset,Specific,
Subspace,sub,"op [ sub identifier = value {, identifier = value }\* ]",Remove the specified identifiers by fixing a value for them,Clause,"op :: dataset

identifier :: name<identifier>

value :: scalar",dataset,Specific,